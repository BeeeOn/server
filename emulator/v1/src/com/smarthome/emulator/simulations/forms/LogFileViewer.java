package com.smarthome.emulator.simulations.forms;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.smarthome.emulator.design.JIOTButton;
import com.smarthome.emulator.design.JIOTScrollBarUI;

import javax.swing.*;
import javax.swing.text.BadLocationException;
import javax.swing.text.StyledDocument;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;

public class LogFileViewer extends JDialog {
    private JPanel contentPane;
    private JPanel panelContent;
    private JIOTButton buttonOK;
    private JScrollPane simulationLogScroller;
    private JTextPane simulationLogText;
    private JLabel performanceSimulationLabel;

    private BufferedReader reader = null;

    public LogFileViewer(File file) {
        $$$setupUI$$$();
        setContentPane(contentPane);
        setModal(false);
        setBounds(345, 100, 580, 360);
        getRootPane().setDefaultButton(buttonOK);
        UIModifications();
        simulationLogScroller.setViewportView(simulationLogText);

        if (file != null) {
            try {
                StyledDocument doc = simulationLogText.getStyledDocument();
                reader = new BufferedReader(new FileReader(file));
                String currentLine;
                while ((currentLine = reader.readLine()) != null) {
                    doc.insertString(doc.getLength(), currentLine + "\n", null);
                }
            } catch (FileNotFoundException e) {
                System.out.println("Cannot find temp file!");
            } catch (BadLocationException e) {
                System.out.println("Cannot read temp file!");
            } catch (IOException e) {
                System.out.println("Cannot access temp file!");
            } finally {
                if (reader != null) {
                    try {
                        reader.close();
                    } catch (IOException e) {
                        System.out.println("Cannot reader of temp file!");
                    }
                }
            }
        } else {
            simulationLogText.setText("Cannot read file");
        }

        buttonOK.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onOK();
            }
        });
    }

    private void onOK() {
// add your code here
        dispose();
    }

    private void UIModifications() {
        simulationLogScroller.getVerticalScrollBar().setUI(new JIOTScrollBarUI());
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
        buttonOK = new JIOTButton("OK", true);
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(3, 1, new Insets(10, 10, 10, 10), -1, -1));
        contentPane.setBackground(new Color(-1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel1.setBackground(new Color(-1));
        contentPane.add(panel1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonOK.setText("OK");
        panel2.add(buttonOK, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        panelContent = new JPanel();
        panelContent.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panelContent.setBackground(new Color(-1));
        contentPane.add(panelContent, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        simulationLogScroller = new JScrollPane();
        panelContent.add(simulationLogScroller, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        simulationLogScroller.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(), null));
        simulationLogText = new JTextPane();
        simulationLogText.setBackground(new Color(-1));
        simulationLogText.setEditable(false);
        simulationLogText.setForeground(new Color(-12303292));
        simulationLogText.setMinimumSize(new Dimension(580, 456));
        simulationLogText.setText("");
        simulationLogText.setVisible(true);
        simulationLogText.putClientProperty("charset", "UTF8");
        simulationLogScroller.setViewportView(simulationLogText);
        performanceSimulationLabel = new JLabel();
        performanceSimulationLabel.setFont(new Font("Segoe UI", Font.PLAIN, 28));
        performanceSimulationLabel.setForeground(new Color(-13127169));
        performanceSimulationLabel.setText("Simulation Log");
        contentPane.add(performanceSimulationLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
