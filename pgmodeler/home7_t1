select count(*) from module where gateway_id is null;
select count(*) from logs where gateway_id is null;
select count(*) from log where gateway_id is null;
select * from device;
alter table module alter column gateway_id not null;
alter table module alter column gateway_id set not null;
ALTER TABLE log ALTER COLUMN gateway_id SET NOT NULL;
alter table gateway drop column offline_since ;
-- add status columns
ALTER TABLE gateway ADD COLUMN status_id SMALLINT DEFAULT 0;
ALTER TABLE device ADD COLUMN status_id SMALLINT DEFAULT 0;
-- create status table
  CREATE TABLE public.status(
status_id SMALLINT NOT NULL,
description varchar(50) NOT NULL DEFAULT '',
CONSTRAINT status_pk PRIMARY KEY (status_id)
);
ALTER TABLE public.status OWNER TO postgres;
-- create FK
ALTER TABLE public.gateway ADD CONSTRAINT gateway_status_fk FOREIGN KEY (status_id)
REFERENCES public.status (status_id) MATCH FULL
ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE public.device ADD CONSTRAINT device_status_fk FOREIGN KEY (status_id)
REFERENCES public.status (status_id) MATCH FULL
ON DELETE CASCADE ON UPDATE CASCADE;
INSERT INTO status VALUES(0, "OK");
INSERT INTO status VALUES(1, "offline");
INSERT INTO status VALUES(2, "error");
-- create FK
ALTER TABLE public.gateway ADD CONSTRAINT gateway_status_fk FOREIGN KEY (status_id)
REFERENCES public.status (status_id) MATCH FULL
ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE public.device ADD CONSTRAINT device_status_fk FOREIGN KEY (status_id)
REFERENCES public.status (status_id) MATCH FULL
ON DELETE CASCADE ON UPDATE CASCADE;
INSERT INTO status VALUES(0, 'OK');
INSERT INTO status VALUES(1, 'offline');
INSERT INTO status VALUES(2, 'error');
-- create FK
ALTER TABLE public.gateway ADD CONSTRAINT gateway_status_fk FOREIGN KEY (status_id)
REFERENCES public.status (status_id) MATCH FULL
ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE public.device ADD CONSTRAINT device_status_fk FOREIGN KEY (status_id)
REFERENCES public.status (status_id) MATCH FULL
ON DELETE CASCADE ON UPDATE CASCADE;
UPDATE device SET status = 1
          WHERE device_euid, gateway_id IN
          SELECT device_euid, gateway_id FROM device WHERE measured_at + 3 * get_refresh(device_euid) < extract(epoch from now())
;
 UPDATE device SET status = 1
          WHERE device_euid, gateway_id IN
          (SELECT device_euid, gateway_id FROM device WHERE measured_at + 3 * get_refresh(device_euid) < extract(epoch from now())   )     ;
 UPDATE device SET status = 1
          WHERE (device_euid, gateway_id) IN
          (SELECT device_euid, gateway_id FROM device WHERE measured_at + 3 * get_refresh(device_euid) < extract(epoch from now())   )     ;
     UPDATE device SET status_id = 1
          WHERE (device_euid, gateway_id) IN
          (SELECT device_euid, gateway_id FROM device WHERE measured_at + 3 * get_refresh(device_euid) < extract(epoch from now())   )     ;
UPDATE device SET status_id = CASE WHEN measured_at + 3 * get_refresh(device_euid) > extract(epoch from now()) THEN 0
                                              ELSE 1;
UPDATE device SET status_id = CASE WHEN measured_at + 3 * get_refresh(device_euid) > extract(epoch from now()) THEN 0
                                              ELSE 1
                                        END;
CREATE OR REPLACE FUNCTION get_signal_module_id(device_type integer) RETURNS integer AS $$
BEGIN
CASE device_type
WHEN 0 THEN RETURN 4;
WHEN 1 THEN RETURN 25;
ELSE RETURN null;
END CASE;
RETURN null;
END;
$$ LANGUAGE plpgsql;
CREATE OR REPLACE FUNCTION get_refresh_module_id(device_type integer) RETURNS integer AS $$
BEGIN
CASE device_type
WHEN 0 THEN RETURN 5;
WHEN 2 THEN RETURN 1;
ELSE RETURN null;
END CASE;
RETURN null;
END;
$$ LANGUAGE plpgsql;
CREATE OR REPLACE FUNCTION get_refresh(_gateway_id decimal(20), _device_euid decimal(20)) RETURNS float AS $$
BEGIN
RETURN SELECT measured_at WHERE gateway_id = _gateway_id AND device_euid = _device_euid AND module_id = get_refresh_module_id(device_type)FROM module join device using(gateway_id, device_euid);
$$ LANGUAGE plpgsql;
CREATE OR REPLACE FUNCTION get_refresh(_gateway_id decimal(20), _device_euid decimal(20)) RETURNS float AS $$
SELECT measured_at WHERE gateway_id = _gateway_id AND device_euid = _device_euid AND module_id = get_refresh_module_id(device_type)FROM module join device using(gateway_id, device_euid);
$$ LANGUAGE plpgsql;
CREATE OR REPLACE FUNCTION get_refresh(_gateway_id decimal(20), _device_euid decimal(20)) RETURNS AS $$
SELECT measured_at WHERE gateway_id = _gateway_id AND device_euid = _device_euid AND module_id = get_refresh_module_id(device_type)FROM module join device using(gateway_id, device_euid);
$$ LANGUAGE SQL;
CREATE OR REPLACE FUNCTION get_refresh(_gateway_id decimal(20), _device_euid decimal(20)) AS $$
SELECT measured_at WHERE gateway_id = _gateway_id AND device_euid = _device_euid AND module_id = get_refresh_module_id(device_type)FROM module join device using(gateway_id, device_euid);
$$ LANGUAGE SQL;
CREATE OR REPLACE FUNCTION get_refresh(_gateway_id decimal(20), _device_euid decimal(20)) RETURNS float AS $$
SELECT measured_at WHERE gateway_id = _gateway_id AND device_euid = _device_euid AND module_id = get_refresh_module_id(device_type)FROM module join device using(gateway_id, device_euid);
$$ LANGUAGE SQL;
CREATE OR REPLACE FUNCTION get_refresh(_gateway_id decimal(20), _device_euid decimal(20)) RETURNS float AS $$
SELECT measured_at WHERE gateway_id = _gateway_id AND device_euid = _device_euid AND module_id = get_refresh_module_id(device_type)  FROM module join device using(gateway_id, device_euid);
$$ LANGUAGE SQL;
CREATE OR REPLACE FUNCTION get_refresh(_gateway_id decimal(20), _device_euid decimal(20)) RETURNS float AS $$
SELECT measured_at WHERE gateway_id = _gateway_id AND device_euid = _device_euid AND module_id = get_refresh_module_id(device_type)  FROM module join device using(gateway_id, device_euid);
$$ LANGUAGE SQL;
CREATE OR REPLACE FUNCTION get_refresh(_gateway_id decimal(20), _device_euid decimal(20)) RETURNS float AS $$
SELECT measured_at FROM module join device using(gateway_id, device_euid)WHERE gateway_id = _gateway_id AND device_euid = _device_euid AND module_id = get_refresh_module_id(device_type)  ;
$$ LANGUAGE SQL;
CREATE OR REPLACE FUNCTION get_refresh_module_id(device_type integer) RETURNS smallint AS $$
BEGIN
CASE device_type
WHEN 0 THEN RETURN 5;
WHEN 2 THEN RETURN 1;
ELSE RETURN null;
END CASE;
RETURN null;
END;
$$ LANGUAGE plpgsql;
CREATE OR REPLACE FUNCTION get_refresh(_gateway_id decimal(20), _device_euid decimal(20)) RETURNS float AS $$
SELECT measured_at FROM module join device using(gateway_id, device_euid)WHERE gateway_id = _gateway_id AND device_euid = _device_euid AND module_id = get_refresh_module_id(device_type)  ;
$$ LANGUAGE SQL;
CREATE OR REPLACE FUNCTION get_refresh(_gateway_id decimal(20), _device_euid decimal(20)) RETURNS bigint AS $$
SELECT measured_at FROM module join device using(gateway_id, device_euid)WHERE gateway_id = _gateway_id AND device_euid = _device_euid AND module_id = get_refresh_module_id(device_type)  ;
$$ LANGUAGE SQL;
CREATE OR REPLACE FUNCTION get_refresh(_gateway_id decimal(20), _device_euid decimal(20)) RETURNS bigint AS $$
BEGIN
RETURN SELECT measured_at FROM module join device using(gateway_id, device_euid);
WHERE gateway_id = _gateway_id AND device_euid = _device_euid AND module_id = get_refresh_module_id(device_type)$$ LANGUAGE SQL;
CREATE OR REPLACE FUNCTION get_refresh(_gateway_id decimal(20), _device_euid decimal(20)) RETURNS bigint AS $$
SELECT measured_at FROM module join device using(gateway_id, device_euid);
WHERE gateway_id = _gateway_id AND device_euid = _device_euid AND module_id = get_refresh_module_id(device_type)$$ LANGUAGE SQL;
CREATE OR REPLACE FUNCTION get_refresh(_gateway_id decimal(20), _device_euid decimal(20)) RETURNS bigint AS $$
SELECT measured_at FROM module join device using(gateway_id, device_euid)
WHERE gateway_id = _gateway_id AND device_euid = _device_euid AND module_id = get_refresh_module_id(device_type)$$ LANGUAGE SQL;
CREATE OR REPLACE FUNCTION get_refresh(_gateway_id decimal(20), _device_euid decimal(20)) RETURNS bigint AS $$
SELECT measured_at FROM module join device using(gateway_id, device_euid)
WHERE gateway_id = _gateway_id AND device_euid = _device_euid AND module_id = get_refresh_module_id(device_type)$$ LANGUAGE SQL;
alter table module drop column not_available ;
ALTER TABLE gateway ADD COLUMN status gateway_status SMALLINT DEFAULT 'on';
ALTER TABLE device ADD COLUMN status device_status DEFAULT 'on';
CREATE TYPE gateway_status AS ENUM ('on', 'off');
CREATE TYPE device_status AS ENUM ('on', 'off');
CREATE TYPE module_status AS ENUM ('on', 'off');
ALTER TABLE gateway ADD COLUMN status gateway_status SMALLINT DEFAULT 'on';
ALTER TABLE device ADD COLUMN status device_status DEFAULT 'on';
ALTER TABLE gateway ADD COLUMN status gateway_status DEFAULT 'on';
ALTER TABLE device ADD COLUMN status device_status DEFAULT 'on';
ALTER TABLE module ADD COLUMN status module_status DEFAULT 'off';
alter table gateway_status rename column 'on' to 'avai';
alter type gateway_status 'on' rename to 'available'
;
alter type gateway_status on rename to 'available'
;
alter type gateway_status  rename attribute 'on' to 'available' cascade;
UPDATE pg_enum SET enumlabel = 'available' WHERE enumtypid = 'gateway_status'::regtype AND enumlabel = 'on';
UPDATE pg_enum SET enumlabel = 'available' WHERE enumtypid = 'device_status'::regtype AND enumlabel = 'on';
UPDATE pg_enum SET enumlabel = 'available' WHERE enumtypid = 'module_status'::regtype AND enumlabel = 'on';
UPDATE pg_enum SET enumlabel = 'unavailable' WHERE enumtypid = 'module_status'::regtype AND enumlabel = 'off';
UPDATE pg_enum SET enumlabel = 'unavailable' WHERE enumtypid = 'device_status'::regtype AND enumlabel = 'off';
UPDATE pg_enum SET enumlabel = 'unavailable' WHERE enumtypid = 'gateway_status'::regtype AND enumlabel = 'off';
select * from device 
;
UPDATE device SET status = CASE WHEN measured_at + 3 * get_refresh(device_euid) > extract(epoch from now()) THEN 'available'                                                                                                                                                   
                                          ELSE 'unavailable'
;
UPDATE device SET status = CASE WHEN measured_at + 3 * get_refresh(device_euid) > extract(epoch from now()) THEN 'available'                                                                                                                                                   
                                          ELSE 'unavailable'
                                          END;
UPDATE device SET status = CASE WHEN measured_at + 3 * get_refresh(device_euid) > extract(epoch from now()) THEN 'available'                                                                                                                                                   
                                          ELSE 'unavailable' ;
UPDATE device SET status_id = CASE WHEN measured_at + 3 * get_refresh(device_euid) > extract(epoch from now()) THEN 0
                                              ELSE 1
                                        END;
UPDATE device SET status = CASE WHEN measured_at + 3 * get_refresh(device_euid) > extract(epoch from now()) THEN 'available'                                                                                                                                                   
                                          ELSE 'unavailable'
                                          END;
UPDATE device SET status = CASE WHEN measured_at + 3 * get_refresh(device_euid) > extract(epoch from now()) THEN 'available'                                                                                                                                                   
                                          ELSE 'unavailable'
                                          END
;
UPDATE device SET status = CASE WHEN measured_at + 3 * get_refresh(device_euid) > extract(epoch from now()) THEN 0
                                              ELSE 1
                                        END;
UPDATE device SET status = CASE WHEN measured_at + 3 * get_refresh(device_euid) > extract(epoch from now()) THEN 'available'
                                              ELSE 1
                                        END;
UPDATE device SET status = CASE WHEN measured_at + 3 * get_refresh(device_euid) > extract(epoch from now()) THEN 'available'
                                              ELSE 'available'
                                        END;
UPDATE device SET status = 'available'
                                        END;
UPDATE device SET status = 'available'
                                      ;
UPDATE device SET status = 'available'::device_status
                                      ;
UPDATE device SET status = CASE WHEN measured_at + 3 * get_refresh(device_euid) > extract(epoch from now()) THEN 'available'::device_status
                                              ELSE 'available'::device_status
                                        END;
UPDATE device SET status = CASE WHEN measured_at + 3 * get_refresh(device_euid) > extract(epoch from now()) THEN 'available'::device_status                                                                                                                                                   
                                          ELSE 'unavailable'::device_status
                                          END;
drop table status cascade
;
alter table gateway drop column status_id;
alter table device drop column status_id;
select * from device;
SELECT device_euid, WHEN measured_at + 3 * get_refresh(device_euid) > extract(epoch from now()) THEN 'fail'                                                                                                                                              
                                          ELSE 'ok'
                                          END
from device;
SELECT device_euid, IIF( measured_at + 3 * get_refresh(device_euid) > extract(epoch from now()) ,1,0) as status from device;
SELECT device_euid, 
IF measured_at + 3 * get_refresh(device_euid) > extract(epoch from now()) THEN 'fail'                                                                                                                                              
                                          ELSE 'ok'
                                          END AS statiu
from device;
SELECT device_euid, 
IF measured_at + 3 * get_refresh(device_euid) > extract(epoch from now()) THEN 'fail'                                                                                                                                              
                                          ELSE 'ok'
                                          END AS statiu
from device;
SELECT device_euid, 
IF (measured_at + 3 * get_refresh(device_euid) > extract(epoch from now())) THEN 'fail'                                                                                                                                              
                                          ELSE 'ok'
                                          END AS statiu
from device;
SELECT device_euid, 
CASE (measured_at + 3 * get_refresh(device_euid) > extract(epoch from now())) WHEN true THEN 'fail'                                                                                                                                              
                                          ELSE 'ok'
                                          END 
from device;
SELECT device_euid, 
CASE (measured_at + 3 * get_refresh(device_euid) > extract(epoch from now())) WHEN true THEN 'fail'                                                                                                                                              
                                          ELSE 'ok'
                                          END as status
from device;
SELECT device_euid, 
     CASE (measured_at + 3 * get_refresh(device_euid) < extract(epoch from now())) 
          WHEN true THEN 'fail'                                                                                                                 ELSE 'ok'
     END as status
from device;
SELECT device_euid, 
CASE (measured_at + 3 * get_refresh(device_euid) > extract(epoch from now())) WHEN true THEN 'fail'                                                                                                                                              
                                          ELSE 'ok'
                                          END as status
from device;
SELECT device_euid, 
     CASE (measured_at + 3 * get_refresh(device_euid) < extract(epoch from now())) 
          WHEN true THEN 'fail'                                                                                                                 ELSE 'ok'
     END as status
from device;
SELECT device_euid, (measured_at + 3 * get_refresh(device_euid) < extract(epoch from now())) ,
     CASE (measured_at + 3 * get_refresh(device_euid) < extract(epoch from now())) 
          WHEN true THEN 'fail'                                                                                                                 ELSE 'ok'
     END as status
from device;
select * from device;
SELECT device_euid, (measured_at + 3 * get_refresh(device_euid) < extract(epoch from now())) ,
     CASE (measured_at + 3 * get_refresh(device_euid) < extract(epoch from now())) 
          WHEN true THEN 'fail'                                                                                                                 ELSE 'ok'
     END as status
from device;
SELECT device_euid, (measured_at + 3 * get_refresh(device_euid) < extract(epoch from now())) ,
     CASE (measured_at + 3 * get_refresh(device_euid) > extract(epoch from now())) 
          WHEN true THEN 'ok'                                                                                                                 ELSE 'fail'
     END as status
from device;
SELECT device_euid, (measured_at + 3 * get_refresh(device_euid) < extract(epoch from now())) ,
     CASE (measured_at + 3 * get_refresh(device_euid) > extract(epoch from now())) 
          WHEN true THEN 'ok'    
          WHEN false THEN 'fail'                                                                                                                 ELSE 'missing refresh module'
     END as status
from device;
SELECT device_euid,
     CASE (measured_at + 3 * get_refresh(device_euid) > extract(epoch from now())) 
          WHEN true THEN 'ok'    
          WHEN false THEN 'fail'                                                                                                                 ELSE 'missing refresh module'
     END as status
from device;
select * from gateway 
;
select * from device;
select * from gateway 
;
select * from device where gateway_id=1935199162210618;
select * from module where gateway_id=1935199162210618;
select * from module where gateway_id=1935199162210618;
select * from module where gateway_id=1935199162210618;
select * from module where gateway_id=1935199162210618;
select * from module where gateway_id=1935199162210618;
select * from module where gateway_id=1935199162210618;
select * from module where gateway_id=1935199162210618;
UPDATE device SET status = CASE WHEN measured_at + 3 * get_refresh(device_euid) > extract(epoch from now()) THEN 'available'::device_status                                                                                                                                                   
                                          ELSE 'unavailable'::device_status 
                                          END;
select * from module where gateway_id=1935199162210618;
SELECT device_euid,
     CASE (measured_at + 3 * get_refresh(device_euid) > extract(epoch from now())) 
          WHEN true THEN 'ok'    
          WHEN false THEN 'fail'                                                                                                                 ELSE 'missing refresh module'
     END as status
from device;
select * from module where gateway_id=1935199162210618;
select get_refresh_module_id(2);
select * from device where gateway_id=1935199162210618;
SELECT device_euid,
     CASE (measured_at + 3 * get_refresh(device_euid) > extract(epoch from now())) 
          WHEN true THEN 'ok'    
          WHEN false THEN 'fail'                                                                                                                 ELSE 'missing refresh module'
     END as status
from device;
select * from module where gateway_id=1935199162210618;
select get_refresh(2729349346);
select get_refresh(1935199162210618,2729349346);
SELECT measured_at FROM module join device using(gateway_id, device_euid)
WHERE gateway_id = _gateway_id AND device_euid = _device_euid AND module_id = get_refresh_module_id(device_type)
;
SELECT measured_at FROM module join device using(gateway_id, device_euid)
WHERE gateway_id = 1935199162210618 AND device_euid = 2729349346 AND module_id = 1;
SELECT measured_at FROM module join device using(gateway_id, device_euid)
WHERE gateway_id = 1935199162210618 AND device_euid = 2729349346 AND module_id = get_refresh_module_id(2)
;
SELECT device_type, measured_at FROM module join device using(gateway_id, device_euid)
WHERE gateway_id = 1935199162210618 AND device_euid = 2729349346 AND module_id = get_refresh_module_id(device_type)
;
CREATE OR REPLACE FUNCTION get_refresh(_gateway_id decimal(20), _device_euid decimal(20)) RETURNS bigint AS $$
SELECT measured_at FROM module join device using(gateway_id, device_euid)
WHERE gateway_id = _gateway_id AND device_euid = _device_euid AND module_id = get_refresh_module_id(device_type)
$$ LANGUAGE SQL;
select get_refresh();
select * from module where gateway_id=1935199162210618;
select get_refresh(1935199162210618, 2729349346);
select get_refresh(1935199162210618, 2729349346);
CREATE OR REPLACE FUNCTION get_refresh(_gateway_id decimal(20), _device_euid decimal(20)) RETURNS bigint AS $$
RETURN SELECT measured_at FROM module join device using(gateway_id, device_euid)
WHERE gateway_id = _gateway_id AND device_euid = _device_euid AND module_id = get_refresh_module_id(device_type)
$$ LANGUAGE SQL;
CREATE OR REPLACE FUNCTION get_refresh(_gateway_id decimal(20), _device_euid decimal(20)) RETURNS bigint AS $$
RETURN SELECT measured_at FROM module join device using(gateway_id, device_euid)
WHERE gateway_id = _gateway_id AND device_euid = _device_euid AND module_id = get_refresh_module_id(device_type)
$$ LANGUAGE SQL;
UPDATE device SET status = CASE WHEN measured_at + 3 * get_refresh(device_euid) < extract(epoch from now()) THEN 'available'::device_status                                                                                                                                                   
                                          ELSE 'unavailable'::device_status 
                                          END;
select * from module where gateway_id=1935199162210618;
CREATE OR REPLACE FUNCTION get_refresh(_gateway_id decimal(20), _device_euid decimal(20)) RETURNS bigint AS $$
SELECT measured_at AS result FROM module join device using(gateway_id, device_euid)
WHERE gateway_id = _gateway_id AND device_euid = _device_euid AND module_id = get_refresh_module_id(device_type)
$$ LANGUAGE SQL;
select get_refresh(1935199162210618, 2729349346);
select get_refresh(1935199162210618, 2729349346);
select * from module where gateway_id=1935199162210618;
select get_refresh(1935199162210618, 2729349346);
SELECT device_type, measured_at FROM module join device using(gateway_id, device_euid)
WHERE gateway_id = 1935199162210618 AND device_euid = 2729349346 AND module_id = get_refresh_module_id(device_type)
;
SELECT device_type, measured_at FROM module join device using(gateway_id, device_euid)
WHERE gateway_id = 1935199162210618 AND device_euid = 2729349346;
SELECT device_type, measured_at FROM module join device using(gateway_id, device_euid)
WHERE gateway_id = 1935199162210618 AND device_euid = 2729349346 AND module_id = get_refresh_module_id(2)
;
SELECT device_type, measured_at FROM module join device using(gateway_id, device_euid)
WHERE gateway_id = 1935199162210618 AND device_euid = 2729349346 AND module_id = get_refresh_module_id(2)
;
SELECT device_type, measured_at FROM module join device using(gateway_id, device_euid)
WHERE gateway_id = 1935199162210618 AND device_euid = 2729349346 AND module_id = get_refresh_module_id(device_type)
;
SELECT device_type, measured_at FROM device join module using(gateway_id, device_euid)
WHERE gateway_id = 1935199162210618 AND device_euid = 2729349346 AND module_id = get_refresh_module_id(device_type)
;
SELECT device_type, measured_at FROM device join module using(gateway_id, device_euid)
WHERE gateway_id = 1935199162210618 AND device_euid = 2729349346
;
SELECT* FROM device join module using(gateway_id, device_euid)
WHERE gateway_id = 1935199162210618 AND device_euid = 2729349346 ;
SELECT* FROM device join module using(gateway_id, device_euid)
WHERE gateway_id = 1935199162210618 AND device_euid = 2729349346 and module_id = 1;
SELECT* FROM device join module using(gateway_id, device_euid)
WHERE gateway_id = 1935199162210618 AND device_euid = 2729349346 AND module_id = get_refresh_module_id(device_type)
;
SELECT* FROM device join module using(gateway_id, device_euid)
WHERE gateway_id = 1935199162210618 AND device_euid = 2729349346 and module_id = 1;
    select device_type, get_refresh_module_id(device_type) from device;
select get_refresh_module_id(2);
select get_refresh_module_id(5);
select get_refresh_module_id(0);
CREATE OR REPLACE FUNCTION get_refresh_module_id(device_type integer) RETURNS integer AS $$
BEGIN
CASE device_type
WHEN 0 THEN RETURN 5;
WHEN 2 THEN RETURN 1;
ELSE RETURN null;
END CASE;
RETURN null;
END;
$$ LANGUAGE plpgsql;
select get_refresh_module_id(0);
    select device_type, get_refresh_module_id(device_type) from device;
    select device_type, get_refresh_module_id(device_type::integer) from device;
CREATE OR REPLACE FUNCTION get_refresh_module_id(device_type smallint) RETURNS smallint AS $$
BEGIN
CASE device_type
WHEN 0 THEN RETURN 5;
WHEN 2 THEN RETURN 1;
ELSE RETURN null;
END CASE;
RETURN null;
END;
$$ LANGUAGE plpgsql;
CREATE OR REPLACE FUNCTION get_refresh(_gateway_id decimal(20), _device_euid decimal(20)) RETURNS bigint AS $$
SELECT measured_at AS result FROM module join device using(gateway_id, device_euid)
WHERE gateway_id = _gateway_id AND device_euid = _device_euid AND module_id = get_refresh_module_id(device_type)
$$ LANGUAGE SQL;
select * from module where gateway_id=1935199162210618;
select * from module where gateway_id=1935199162210618;
select * from module where gateway_id=1935199162210618;
select * from module where gateway_id=1935199162210618;
SELECT measured_at AS result FROM module join device using(gateway_id, device_euid)
WHERE gateway_id = _gateway_id AND device_euid = _device_euid AND module_id = get_refresh_module_id(device_type)
;
SELECT* FROM device join module using(gateway_id, device_euid)
WHERE gateway_id = 1935199162210618 AND device_euid = 2729349346 AND module_id = get_refresh_module_id(device_type)
;
SELECT* FROM device join module using(gateway_id, device_euid)
WHERE gateway_id = 1935199162210618 AND device_euid = 2729349346 AND module_id = get_refresh_module_id(device_type::integer)
;
CREATE OR REPLACE FUNCTION get_refresh_module_id(device_type smallint) RETURNS smallint AS $$
BEGIN
CASE device_type
WHEN 0 THEN RETURN 5;
WHEN 2 THEN RETURN 1;
ELSE RETURN null;
END CASE;
RETURN null;
END;
$$ LANGUAGE plpgsql;
CREATE OR REPLACE FUNCTION get_refresh_module_id(device_type smallint) RETURNS smallint AS $$
BEGIN
CASE device_type
WHEN 0 THEN RETURN 5;
WHEN 2 THEN RETURN 1;
ELSE RETURN null;
END CASE;
RETURN null;
END;
$$ LANGUAGE plpgsql;
drop function                   get_refresh_module_id;
drop function                   get_refresh_module_id();
drop function                   get_refresh_module_id(integer);
CREATE OR REPLACE FUNCTION get_refresh_module_id(device_type smallint) RETURNS smallint AS $$
BEGIN
CASE device_type
WHEN 0 THEN RETURN 5;
WHEN 2 THEN RETURN 1;
ELSE RETURN null;
END CASE;
RETURN null;
END;
$$ LANGUAGE plpgsql;
drop function                   get_refresh_module_id(integer);
CREATE OR REPLACE FUNCTION get_refresh_module_id(device_type smallint) RETURNS smallint AS $$
BEGIN
CASE device_type
WHEN 0 THEN RETURN 5;
WHEN 2 THEN RETURN 1;
ELSE RETURN null;
END CASE;
RETURN null;
END;
$$ LANGUAGE plpgsql;
drop function                   get_refresh_module_id(integer);
select get_refresh_module_id(2);
select get_refresh_module_id(0);
select get_refresh_module_id(02);
select get_refresh_module_id();
select get_refresh_module_id(1);
select get_refresh_module_id(0);
select get_refresh_module_id(0::integer);
select get_refresh_module_id(0::smallint);
select get_refresh_module_id(0);
CREATE OR REPLACE FUNCTION get_refresh_module_id(device_type) RETURNS smallint AS $$
BEGIN
CASE device_type
WHEN 0 THEN RETURN 5;
WHEN 2 THEN RETURN 1;
ELSE RETURN null;
END CASE;
RETURN null;
END;
$$ LANGUAGE plpgsql;
CREATE OR REPLACE FUNCTION get_refresh_module_id(device_type decimal) RETURNS smallint AS $$
BEGIN
CASE device_type
WHEN 0 THEN RETURN 5;
WHEN 2 THEN RETURN 1;
ELSE RETURN null;
END CASE;
RETURN null;
END;
$$ LANGUAGE plpgsql;
select get_refresh_module_id(0);
drop function                   get_refresh_module_id(integer);
drop function                   get_refresh_module_id(smallint);
select get_refresh_module_id(0);
drop function                   get_refresh_module_id(bigint);
drop function                   get_refresh_module_id(varchar);
select get_refresh_module_id(0);
select get_refresh_module_id(0::smallint);
select * from device;
select * from gateway 
;
select * from module where gateway_id=1935199162210618;
select * from module where gateway_id=1935199162210618;
select * from device where gateway_id=1935199162210618;
select * from module where gateway_id=1935199162210618;
select * from module where gateway_id=1935199162210618;
select * from device where gateway_id=1935199162210618;
select isnull(null);
select is_null(null);
select is null(null);
select not null(null);
select * from device where gateway_id=1935199162210618;
select * from device where gateway_id=1935199162210618;
select null is null;
select null is not null;
select 1 is not null;
select * from gateway;
select * from device where gateway_id =1136640502157703;
select * from module where gateway_id =1136640502157703;
select * from module where gateway_id =1136640502157703;
insert into module values(2729285941, 1, 1000, 1136640502157703);
select * from module where gateway_id =1136640502157703;
select * from module where gateway_id =1136640502157703;
select * from device where gateway_id =1136640502157703;
update  device set measured_at = extract(epoch from now()) where gateway_id =1136640502157703;
select * from device where gateway_id =1136640502157703;
select * from device where gateway_id =1136640502157703;
insert into device values (9991, 0, '', 33,  -1 , -1 , 0, 1441115479,1441115479,null,1136640502157703);
insert into device values (9992, 0, '', 33,  -1 , -1 , 0, 1441115479,1441115479,null,1136640502157703);
insert into device values (9993, 2, '', 33,  -1 , -1 , 0, 1441115479,1441115479,null,1136640502157703);
select * from module where gateway_id =1136640502157703;
select * from user_gateway ;
update user_gateway set permission = 'superuser' where gateway_id = 1136640502157703;
select * from user_gateway ;
select * from user;
select * from users;
update user_gateway set permission = 'owner' where gateway_id = 1136640502157703;
select * from users;
select * from users;
select * from gateway ;
insert into user_gateway values(3,1935199162210618, 'admin');
insert into user_gateway values(3,51966, 'owner');
select * from user_gateway ;
update user_gateway set permission = 'owner' where user_id = 3;
select * from devices where gateway_id= 51966;
select * from device where gateway_id= 51966;
select * from user_gateway ;
select * from device where gateway_id= 1935199162210618;
select * from device where gateway_id= 1935199162210618;
select * from devices where gateway_id= 51966;
select * from device where gateway_id= 51966;
select * from device where gateway_id= 51966;
select * from device where gateway_id= 51966;
select * from device where gateway_id= 1935199162210618;
select * from gateway where gateway_id != 1;
select trunct(inf);
select trunc(inf);
select trunc(inf::float);
select trunc(infinity::float);
select trunc(1.1);
select trunc('infinity'::float);
select trunc('inf'::float);
select trunc('inf'::numeric);
;
select cast ('inf' as float)
;
select cast ('inf' as numeric);
SELECT SUBSTRING('1.112341', '.*[.]([0-9]*)');
SELECT SUBSTRING('1.112341', '.*[.]([0-9]{0,2})');
SELECT SUBSTRING('1.112341', '(.*[.][0-9]{0,2})');
SELECT SUBSTRING('inf', '(.*[.][0-9]{0,2})');
SELECT SUBSTRING('inf', '(.*[.][0-9]{0,2})[0-9]*');
SELECT SUBSTRING('11.111', '(.*[.][0-9]{0,2})[0-9]*');
SELECT SUBSTRING('11.111', '(.*[.]?[0-9]{0,2})[0-9]*');
SELECT SUBSTRING('11.11111', '(.*[.]?[0-9]{0,2})[0-9]*');
SELECT SUBSTRING('11.11111', '(.?*[.]?[0-9]{0,2})[0-9]*');
SELECT SUBSTRING('11.11111', '(.*?[.]?[0-9]{0,2})[0-9]*');
SELECT SUBSTRING('11.11111', '([!.]*?[.]?[0-9]{0,2})[0-9]*');
SELECT SUBSTRING('11.11111', '([^.]*?[.]?[0-9]{0,2})[0-9]*');
SELECT SUBSTRING('11.11111', '([^.]*?');
SELECT SUBSTRING('11.11111', '([^.]*?)');
SELECT SUBSTRING('11.11111', '([^.]*?).*');
SELECT SUBSTRING('11.11111', '([^.]*).*');
SELECT SUBSTRING('11.11111', '([^.]*[.][0-9]{0,2}).*');
SELECT SUBSTRING('inf', '([^.]*[.][0-9]{0,2}).*');
SELECT SUBSTRING('inf', '([^.]*[.]?[0-9]{0,2}).*');
SELECT SUBSTRING('11.11111', '([^.]*[.]?[0-9]{0,2}).*');
SELECT SUBSTRING('1111111111111.11111', '([^.]*[.]?[0-9]{0,2}).*');
SELECT SUBSTRING('1111111111111.11111::float', '([^.]*[.]?[0-9]{0,2}).*');
SELECT SUBSTRING('11'::float, '([^.]*[.]?[0-9]{0,2}).*');
SELECT SUBSTRING((11::float), '([^.]*[.]?[0-9]{0,2}).*');
SELECT SUBSTRING((11::float)::char, '([^.]*[.]?[0-9]{0,2}).*');
SELECT SUBSTRING((11.2::float)::char, '([^.]*[.]?[0-9]{0,2}).*');
select 11.2::text
;
SELECT SUBSTRING((11::float)::text, '([^.]*[.]?[0-9]{0,2}).*');
SELECT SUBSTRING((11.222::float)::text, '([^.]*[.]?[0-9]{0,2}).*');
SELECT SUBSTRING((inf::float)::text, '([^.]*[.]?[0-9]{0,2}).*');
SELECT SUBSTRING(('inf'::float)::text, '([^.]*[.]?[0-9]{0,2}).*');
select sum(1,2);
select sum(select (1,2));
select sum(select (1,2) as a);
select sum(select (1) as a);
select 1 + Inf;
select 1 + 'inf';
select 1 + 2;
select 1 + 'inf'::float;
select * from users;
select * from gateway ;
select * from device where gateway_id = 1935199162210618;
UPDATE device SET status = CASE WHEN measured_at + 3 * get_refresh(device_euid) > extract(epoch from now()) THEN 'available'::device_status                                                                                                                                                  
                                          ELSE 'unavailable'::device_status 
                                        END   ;
select * from device where gateway_id = 1935199162210618;
select * from module where gateway_id = 1935199162210618;
select get_refresh(0);
select get_refresh(3925868545);
select get_refresh_module_id(2);
select get_refresh_module_id(0);
select get_refresh(1935199162210618,3925868545);
SELECT measured_at FROM module join device using(gateway_id, device_euid)
WHERE gateway_id = _gateway_id AND device_euid = _device_euid AND module_id = get_refresh_module_id(device_type);
SELECT measured_at FROM module join device using(gateway_id, device_euid)
WHERE gateway_id = 1935199162210618 AND device_euid = 3925868545 AND module_id = get_refresh_module_id(device_type);
DROP FUNCTION get_refresh_module_id(integer);
DROP FUNCTION get_refresh_module_id(smallint);
DROP FUNCTION get_refresh_module_id(bigint);
SELECT device_type, get_refresh_module_id(device_type),measured_at FROM module join device using(gateway_id, device_euid)
WHERE gateway_id = 1935199162210618 AND device_euid = 3925868545 AND module_id = get_refresh_module_id(device_type);
select * from module where gateway_id = 1935199162210618;
select * from device where gateway_id = 1935199162210618;
CREATE OR REPLACE FUNCTION get_refresh(_gateway_id decimal(20), _device_euid decimal(20)) RETURNS bigint AS $$
SELECT measured_value FROM module join device using(gateway_id, device_euid)
WHERE gateway_id = _gateway_id AND device_euid = _device_euid AND module_id = get_refresh_module_id(device_type)
$$ LANGUAGE SQL;
CREATE OR REPLACE FUNCTION get_refresh(_gateway_id decimal(20), _device_euid decimal(20)) RETURNS real AS $$
SELECT measured_value FROM module join device using(gateway_id, device_euid)
WHERE gateway_id = _gateway_id AND device_euid = _device_euid AND module_id = get_refresh_module_id(device_type)
$$ LANGUAGE SQL;
drop function get_refresh(decimal,decimal);
CREATE OR REPLACE FUNCTION get_refresh(_gateway_id decimal(20), _device_euid decimal(20)) RETURNS real AS $$
SELECT measured_value FROM module join device using(gateway_id, device_euid)
WHERE gateway_id = _gateway_id AND device_euid = _device_euid AND module_id = get_refresh_module_id(device_type)
$$ LANGUAGE SQL;
UPDATE device SET status = CASE WHEN measured_at + 3 * get_refresh(device_euid) > extract(epoch from now()) THEN 'available'::device_status                                                                                                                                                  
                                          ELSE 'unavailable'::device_status 
                                        END   ;
select * from module where gateway_id = 1935199162210618;
select * from device where gateway_id = 1935199162210618;
SELECT device_type, get_refresh_module_id(device_type),measured_at FROM module join device using(gateway_id, device_euid)
WHERE gateway_id = 1935199162210618 AND device_euid = 3925868545 AND module_id = get_refresh_module_id(device_type);
SELECT device_type, get_refresh_module_id(device_type),measured_value FROM module join device using(gateway_id, device_euid)
WHERE gateway_id = 1935199162210618 AND device_euid = 3925868545 AND module_id = get_refresh_module_id(device_type);
UPDATE device SET status = CASE WHEN measured_at + 3 * get_refresh(device_euid) > extract(epoch from now()) THEN 'available'::device_status                                                                                                                                                  
                                          ELSE 'unavailable'::device_status 
                                        END   ;
select * from device where gateway_id = 1935199162210618;
select get_refresh(1935199162210618,3925868545);
select get_refresh(3925868545);
drop function get_refresh(integer);
drop function get_refresh(bigint);
drop function get_refresh(numeric);
drop function get_refresh(decimal);
CREATE OR REPLACE FUNCTION get_refresh_module_id(device_type numeric) RETURNS smallint AS $$
BEGIN
CASE device_type
WHEN 0 THEN RETURN 5;
WHEN 2 THEN RETURN 1;
ELSE RETURN null;
END CASE;
RETURN null;
END;
$$ LANGUAGE plpgsql;
UPDATE device SET status = CASE WHEN measured_at + 3 * get_refresh(device_euid) > extract(epoch from now()) THEN 'available'::device_status                                                                                                                                                  
                                          ELSE 'unavailable'::device_status 
                                        END   ;
drop function get_refresh(integer);
drop function get_refresh(bigint);
drop function get_refresh(smallint);
drop function get_refresh(numeric);
drop function get_refresh(smallint);DROP FUNCTION get_refresh_module_id(integer);
DROP FUNCTION get_refresh_module_id(smallint);
DROP FUNCTION get_refresh_module_id(integer);
DROP FUNCTION get_refresh_module_id(smallint);
DROP FUNCTION get_refresh_module_id(bigint);
DROP FUNCTION get_refresh_module_id(numeric);
CREATE OR REPLACE FUNCTION get_refresh_module_id(device_type numeric) RETURNS smallint AS $$
BEGIN
CASE device_type
WHEN 0 THEN RETURN 5;
WHEN 2 THEN RETURN 1;
ELSE RETURN null;
END CASE;
RETURN null;
END;
$$ LANGUAGE plpgsql;
UPDATE device SET status = CASE WHEN measured_at + 3 * get_refresh(device_euid) > extract(epoch from now()) THEN 'available'::device_status                                                                                                                                                  
                                          ELSE 'unavailable'::device_status 
                                        END   ;
UPDATE device SET status = CASE WHEN measured_at + 3 * get_refresh(device_euid::numeric) > extract(epoch from now()) THEN 'available'::device_status                                                                                                                                                  
                                          ELSE 'unavailable'::device_status 
                                        END   ;
UPDATE device SET status = CASE WHEN measured_at + 3 * get_refresh(gateway_id, device_euid) > extract(epoch from now()) THEN 'available'::device_status                                                                                                                                                  
                                          ELSE 'unavailable'::device_status 
                                        END   ;
select * from gateway;
select * from device where gateway_id =1786024701947604;
select * from module where gateway_id =1786024701947604;
select * from module where gateway_id =1786024701947604 and device_euid = 3925868557;;
select get_refresh_module_id(0);
select * from module where gateway_id =1786024701947604 and device_euid = 3925868552;
UPDATE device SET status = CASE measured_at + 3 * get_refresh(gateway_id, device_euid) > extract(epoch from now()) WHEN true THEN 'available'::device_status                                                                                                                                                  
                                          ELSE 'unavailable'::device_status 
                                        END   ;
UPDATE device SET status = CASE measured_at + 3 * get_refresh(gateway_id, device_euid) > extract(epoch from now()) 
                                WHEN true THEN 'available'::device_status                                                                                                                                                  
                                WHEN false THEN 'unavailable'::device_status 
                                ELSE 'available'::device_status
                                ;
UPDATE device SET status = CASE measured_at + 3 * get_refresh(gateway_id, device_euid) > extract(epoch from now()) 
                                WHEN true THEN 'available'::device_status                                                                                                                                                  
                                WHEN false THEN 'unavailable'::device_status 
                                ELSE 'available'::device_status ;
UPDATE device SET status = CASE measured_at + 3 * get_refresh(gateway_id, device_euid) > extract(epoch from now()) 
                                WHEN true THEN 'available'::device_status                                                                                                                                                  
                                WHEN false THEN 'unavailable'::device_status 
;
UPDATE device SET status = CASE measured_at + 3 * get_refresh(gateway_id, device_euid) > extract(epoch from now()) 
                                WHEN true THEN 'available'::device_status                                                                                                                                                  
                                WHEN false THEN 'unavailable'::device_status 
                                ELSE 'available'::device_status
                           END;     
select * from  user_gateway;
select * from users;
select * from gateway;
insert into user_gateway (1786024701947604, 207 , );
insert into user_gateway (1786024701947604, 207 , 'owner');
insert into user_gateway (207, 1786024701947604 , 'owner');
select * from user_gateway ;
insert into user_gateway values (207, 1786024701947604 , 'owner');
select * from gateway;
insert into user_gateway values (207, 1935199162210618 , 'owner');
insert into user_gateway values (3, 1935199162210618 , 'owner');
select * from module;
select count(*) FROM logs WHERE measured_at < extract(epoch from now()) - 86400 * 2;
select count(*) FROM log WHERE measured_at < extract(epoch from now()) - 86400 * 2;
select count(*) FROM log WHERE measured_at < extract(epoch from now()) - 86400 * 14;
select count(*) FROM log WHERE measured_at < extract(epoch from now()) - 86400 * 30;
select count(*) FROM log WHERE measured_at < extract(epoch from now()) - 86400 * 80;
select count(*) FROM log WHERE measured_at < extract(epoch from now()) - 86400 * 150;
select count(*) FROM log WHERE measured_at < extract(epoch from now()) - (86400 * 100);
DELETE log WHERE measured_at < extract(epoch from now()) - (86400 * 100);
DELETE FROM log WHERE measured_at < extract(epoch from now()) - (86400 * 100);
DELETE log WHERE measured_at < extract(epoch from now()) - (86400 * 100);
select count(*) FROM log WHERE measured_at < extract(epoch from now()) - (86400 * 100);
select count(*) FROM log WHERE measured_at < extract(epoch from now()) - (86400 * 100);
select count(*) FROM log WHERE measured_at < extract(epoch from now()) - (86400 * 100);
select * FROM log WHERE measured_at < extract(epoch from now()) - (86400 * 100);
select  extract(epoch from now());
DELETE FROM log WHERE measured_at < extract(epoch from now()) - (86400 * 100);
select * FROM log WHERE measured_at < extract(epoch from now()) - (86400 * 100);
\d
\d
\l
\l+
drop database filedb
;
drop database filedb_test;
drop database home;
drop database home5;
create database home7_test
;
\s home7_test
\i home7.sql
\i home7_alter_1.sql 
\i home7_alter_2.sql 
ALTER TABLE public.device ADD CONSTRAINT device_gateway FOREIGN KEY (gateway_id)
REFERENCES public.gateway (gateway_id) MATCH FULL
ON DELETE CASCADE ON UPDATE NO ACTION;
ALTER TABLE public.module ADD CONSTRAINT module_device_fk FOREIGN KEY (device_euid, gateway_id)
REFERENCES public.device (device_euid, gateway_id) MATCH FULL
ON DELETE CASCADE ON UPDATE NO ACTION;
ALTER TABLE public.log ADD CONSTRAINT log_module_fk FOREIGN KEY (device_euid, module_id, gateway_id)
REFERENCES public.module (device_euid, module_id, gateway_id) MATCH FULL
ON DELETE CASCADE ON UPDATE NO ACTION;
select * from users;
select * from users;
select * from user_gateway;
select * from gateway;
insert into user_gateway values(3058, 4, 'owner')
;
select * gateway where gateway_id%1000 = 8329;
select * from gateway where gateway_id%1000 = 8329;
select * from gateway where gateway_id%10000 = 8329;
select * from uses;
select * from users;
select * from user_gateway;
select * from device where gateway_id =1150206171987900;
select * from device where gateway_id =1935199162210618;
select * from device where gateway_id =1545080148680501;
select * from device where gateway_id =1935199162210618;
select * from device where gateway_id =1935199162210618;
select * from module where gateway_id =1935199162210618;
select * from device where gateway_id =1935199162210618;
select * from module where gateway_id =1935199162210618;
select * from device where gateway_id =1935199162210618;
select * from device where gateway_id =1150206171987900;
select * from device where gateway_id =1545080148680501;
select * from module where gateway_id =1545080148680501;
select get_refresh(1545080148680501,0);
select get_refresh(1545080148680501,3925868561);
UPDATE device SET status = CASE measured_at + 3 * get_refresh(gateway_id, device_euid) > extract(epoch from now()) 
                                WHEN true THEN 'available'::device_status                                                                                                                                                  
                                WHEN false THEN 'unavailable'::device_status 
                                ELSE 'available'::device_status
                           END;     
select * from device where gateway_id =1545080148680501;
select * from user_gateway ;
select * from users;
select * from users;
select * from user_gateway ;
insert into users(mail) values xxx where 0;
insert into users(mail) values select xxx where 0;
insert into users(mail) values select xxx where 0;
insert into users(mail) select xxx where 0;
insert into users(mail) select 'xx' where 0;
insert into users(mail) select 'xx' where false;
select * from users+
;
select * from users;
select * from users;
select * from user_gateway;
\i home7_alter_4.sql 
select 1;
select 1; -- asdasd
select * from gateway;
select * from device;
select * from module;
select * from gateway;
select * from gateway where gateway_id = 256;
INSERT INTO gateway VALUES(x'00000100'::integer);
INSERT INTO device(gateway_id, device_euid, device_id) VALUES(x'00000100'::integer, 1, 2);
select * from device ;
INTO gateway VALUES(x'00000100'::integer);
INSERT INTO gateway VALUES(x'00000100'::integer);
INSERT INTO device(gateway_id, device_euid, device_type) VALUES(x'00000100'::integer, 1, 2);
select * from module where device_euid = 1;
SELECT count(*) FROM module WHERE device_euid = 1 AND status = "available";
SELECT count(*) FROM module WHERE device_euid = 1 AND status = 'available';
select * from module;
select json_build_object('id', u,id) from users;
select json_build_object('id', u,id) from users u;
select json_build_object('id', u.id) from users u;
select json_build_object('id', u.user_id) from users u;
select * from module;
\dt
CREATE TABLE public.device_parameter(
  gateway_id decimal(20,0) NOT NULL,
  device_euid decimal(20,0) NOT NULL,
  parameter_key varchar(10) NOT NULL,
  parameter_value varchar(255),
CONSTRAINT device_parameter_pk PRIMARY KEY (gateway_id, device_euid, parameter_key)
);
ALTER TABLE public.device_parameter ADD CONSTRAINT device_parameter FOREIGN KEY (gateway_id, device_euid)
REFERENCES public.device (gateway_id, device_euid) MATCH FULL
ON DELETE CASCADE ON UPDATE NO ACTION;
select * from devices;
select * from device;
select * from device_parameter ;
select xmlelement('a');
select xmlelement(a);
select xmlelement(name a);
select xmlelement(name a, xmlattributes(x as x));
select xmlelement(name parameters, xmlattributes(parameter_key as key, parameter_value as value)) from device_parameter;;
select xmlelement(name parameter, xmlattributes(parameter_key as key, parameter_value as value)) from device_parameter;;
 insert into device_parameter values(100,201,'k2', 'v2');
select xmlelement(name parameter, xmlattributes(parameter_key as key, parameter_value as value)) from device_parameter;;
select xmlagg( xmlelement(name parameter, xmlattributes(parameter_key as key, parameter_value as value)) from device_parameter );
select xmlagg( xmlelement(name parameter, xmlattributes(parameter_key as key, parameter_value as value))) from device_parameter ;
select xmlagg( xmlelement(name parameter, xmlattributes(parameter_key as key, parameter_value as value))) from device_parameter where device_euid=201 AND gateway_id=100;
select * from users;
select * from device;
select * from device order by measured_at;; 
insert into user_gateway values(123,1935199162210618,'owner');
\d
\d
\l
create database home7_t1;
\s home7_t1
