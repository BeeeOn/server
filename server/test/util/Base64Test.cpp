#ifndef BEEEON_BASE64_TEST_H
#define BEEEON_BASE64_TEST_H

#include <cstring>
#include <cppunit/extensions/HelperMacros.h>

#include "util/Base64.h"

using namespace std;

namespace BeeeOn {

class Base64Test : public CppUnit::TestFixture {
	CPPUNIT_TEST_SUITE(Base64Test);
	CPPUNIT_TEST(testEncode);
	CPPUNIT_TEST(testDecode);
	CPPUNIT_TEST(testDecodeLong);
	CPPUNIT_TEST(testLongInput);
	CPPUNIT_TEST_SUITE_END();
public:
	void testEncode();
	void testDecode();
	void testDecodeLong();
	void testLongInput();
};

CPPUNIT_TEST_SUITE_REGISTRATION(Base64Test);

void Base64Test::testEncode()
{
	char buf[32] = {
		'\x05', '\x16', '\xab', '\xff', '\x12', '\x95', '\x49', '\x90',
		'\x34', '\x44', '\x17', '\x47', '\x77', '\x78', '\x77', '\x10',
		'\x00', '\xed', '\xcc', '\x10', '\x89', '\xa8', '\xaa', '\xa8',
		'\x01', '\xdc', '\xc2', '\x47', '\x8b', '\x78', '\x77', '\x10',
	};

	/**
	 * Generated as (without the wrapping):
	 *
	 * $ echo -ne "\x05\x16\xab\xff\x12\x95\x49\x90\x34\x44
	 *             \x17\x47\x77\x78\x77\x10\x00\xed\xcc\x10
	 *             \x89\xa8\xaa\xa8\x01\xdc\xc2\x47\x8b\x78
	 *             \x77\x10" | base64 -w 0
	 */
	const string expect = "BRar/xKVSZA0RBdHd3h3EADtzBCJqKqoAdzCR4t4dxA=";

	const string &result = Base64::encode(buf, sizeof(buf));
	CPPUNIT_ASSERT(result.compare(expect) == 0);
}

void Base64Test::testDecode()
{
	const string data = "YW55IGFyYml0cmFyeSB0ZXN0aW5nIHRleHQK";
	char buf[32];
	size_t len;

	const char expect[] = {
		'a', 'n', 'y', ' ', 'a', 'r', 'b', 'i',
		't', 'r', 'a', 'r', 'y', ' ', 't', 'e',
		's', 't', 'i', 'n', 'g', ' ', 't', 'e', 'x', 't', '\n'};

	len = Base64::decode(data, buf, sizeof(buf));
	CPPUNIT_ASSERT_EQUAL(sizeof(expect), len);
	CPPUNIT_ASSERT(std::memcmp(buf, expect, sizeof(expect)) == 0);
}

void Base64Test::testLongInput()
{
	char data[91] = "aGVsbG9teWxhZHloZWxsb215bGFkeWhlbGxvbXlsYWR5aGVsbG9teWxhZ"
		"HloZWxsb215bGFkeWhlbGxvbXlsYWR5Cg";
	const string expect = "YUdWc2JHOXRlV3hoWkhsb1pXeHNiMjE1YkdGa2VXaGxiR3h2Ylh"
		"sc1lXUjVhR1ZzYkc5dGVXeGhaSGxvWld4c2IyMTViR0ZrZVdobGJHeHZiWGxzWVdSNUNn"
		"AA==";

	const string &result = Base64::encode(data, sizeof(data));

	CPPUNIT_ASSERT(result.compare(expect) == 0);
}

void Base64Test::testDecodeLong()
{
	const string data =
	"MIIFSDCCAzACCQDkh6bc5wUd9TANBgkqhkiG9w0BAQsFADBmMQswCQYDVQQGEwJD"
	"WjEXMBUGA1UECAwOQ3plY2ggUmVwdWJsaWMxDTALBgNVBAcMBEJybm8xDDAKBgNV"
	"BAoMA0lvVDEhMB8GCSqGSIb3DQEJARYSY2FAaW90LmV4YW1wbGUuY29tMB4XDTE2"
	"MTEwNjIzMjgyNFoXDTE2MTEwNzIzMjgyNFowZjELMAkGA1UEBhMCQ1oxFzAVBgNV"
	"BAgMDkN6ZWNoIFJlcHVibGljMQ0wCwYDVQQHDARCcm5vMQwwCgYDVQQKDANJb1Qx"
	"ITAfBgkqhkiG9w0BCQEWEmNhQGlvdC5leGFtcGxlLmNvbTCCAiIwDQYJKoZIhvcN"
	"AQEBBQADggIPADCCAgoCggIBAK88v+5oofmGQJTKaHrRKT+8fY4SGK/CYlH6teOR"
	"f3WDeNfMrCrb8Fxrc2KEi203+WzCFAzFwOLlk8QwZN4XhCp8btWGVY2N98Mgsop0"
	"HuHXo++3OUX4LxSsMP/iq7n9nkta8Jqhj5UpulGoL8qiASGWE2/+F2b8FNTXZo3s"
	"2K52kBa/5lTtdV0t/p7Gn8j+XzvGILUwdDNwWzNQFVZ4lYiHnel4e2O4Vgl3pbqr"
	"diFsdhkGiAjrBJVxkQ36LuQongzOWkHvUihd3bSBZcHQSuKUguB17sVOe3glr81z"
	"kzXiGjGNvghmTLjHsFq2CbC7TKO/N5cyszlfWdpWWRif7D5pv81/vndQVcBqSW9y"
	"TIzuqOgyu+9IxpJWGrFX74GCCcYRsrYYmSXDO9sywA6CkB0ZofAM7CibJYiMiGN6"
	"8+uTyn2N/YIZm/ZizS+IhD0KKXhQ1pRzDByP5Z7ezCrLfvf70rtkyGka9U7bsNwB"
	"hSanAjrg72N6OeZxU4NCyvHWUtru0KXkYrgBzQQtoVJpB0DQ68dPSY5dkoxBA5L7"
	"US0LbEyyyHAEZa3zSS/r3al/XKZpduq4yd4X8r5htsaunWYUo8TgW/nkQgTYLvZd"
	"LgZCtcZyKVIVagQHUi6cND0pQE/ZNjbBtMyhbBkC7EVyMMYqYwLYhgNr7Zbe9oTb"
	"ZLozAgMBAAEwDQYJKoZIhvcNAQELBQADggIBABJ5aIH/fJzZiQj/5Vwzd2Iqx+q/"
	"wZsyw0P9EHV1h6GKb89sLy5kE6eN//mwajUPAvnX9GLw54xUXbxByzxpnqjd6muY"
	"/3yVLGiOCYEL0Vm3U8PSGBhEiQRU2gdwd1YwZHDZK/VwqGP8F3ACI5Y1gy2O0S7W"
	"qy4acv4+o4fsADorHMG6iKudnQHfwEHKyAMggc1llNy47G9bT7j6Daq/O5iMuK6G"
	"Aew+1IIvm2Di31fGA0f9mVWz8vtjOS1Zmqfx461Fr30DCPmL8uy2v+TKcR8BpCDc"
	"XeoOS6gJsqlKlXbqLIRpx1ZTRlmvltgu0Qli9DhIrHflPpmuKkUK2BEhuagSlsyy"
	"fZgZvr4mqPdJBCHbA9A1zHsYIXfcqW8cri01KLEVuYocpXXIQeaBLMrbW3lBSwiJ"
	"LMjgQj5JkKpt6lXPILg6ztGkr93UbMQ7ewhrtpYmTEQ0A5SzGlzuh5mG9rWvmZEb"
	"E3eMrbkfYlZGY3wdwQk+WbJ+Ujf2ymfdAY8+ou6Uaph45TxD3Lt/GMSBzm0ArQgT"
	"kbSwOQQfTYy0YTJEt+bcTGQlYyFShAuzp5rdJtjr+k2cGKDtJ1r0JELdbLhF/PNs"
	"/Qni1YBxgodWFAYaVmNvefLbgzYQmvUNrOdVRJZ0IcSWNF1BypCOE90NBsr42YAk"
	"1cmf7vCdCVuA7s/8";

	const string expect = string(
	"\x30\x82\x05\x48\x30\x82\x03\x30\x02\x09\x00\xe4\x87\xa6\xdc\xe7"
	"\x05\x1d\xf5\x30\x0d\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x0b"
	"\x05\x00\x30\x66\x31\x0b\x30\x09\x06\x03\x55\x04\x06\x13\x02\x43"
	"\x5a\x31\x17\x30\x15\x06\x03\x55\x04\x08\x0c\x0e\x43\x7a\x65\x63"
	"\x68\x20\x52\x65\x70\x75\x62\x6c\x69\x63\x31\x0d\x30\x0b\x06\x03"
	"\x55\x04\x07\x0c\x04\x42\x72\x6e\x6f\x31\x0c\x30\x0a\x06\x03\x55"
	"\x04\x0a\x0c\x03\x49\x6f\x54\x31\x21\x30\x1f\x06\x09\x2a\x86\x48"
	"\x86\xf7\x0d\x01\x09\x01\x16\x12\x63\x61\x40\x69\x6f\x74\x2e\x65"
	"\x78\x61\x6d\x70\x6c\x65\x2e\x63\x6f\x6d\x30\x1e\x17\x0d\x31\x36"
	"\x31\x31\x30\x36\x32\x33\x32\x38\x32\x34\x5a\x17\x0d\x31\x36\x31"
	"\x31\x30\x37\x32\x33\x32\x38\x32\x34\x5a\x30\x66\x31\x0b\x30\x09"
	"\x06\x03\x55\x04\x06\x13\x02\x43\x5a\x31\x17\x30\x15\x06\x03\x55"
	"\x04\x08\x0c\x0e\x43\x7a\x65\x63\x68\x20\x52\x65\x70\x75\x62\x6c"
	"\x69\x63\x31\x0d\x30\x0b\x06\x03\x55\x04\x07\x0c\x04\x42\x72\x6e"
	"\x6f\x31\x0c\x30\x0a\x06\x03\x55\x04\x0a\x0c\x03\x49\x6f\x54\x31"
	"\x21\x30\x1f\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x09\x01\x16\x12"
	"\x63\x61\x40\x69\x6f\x74\x2e\x65\x78\x61\x6d\x70\x6c\x65\x2e\x63"
	"\x6f\x6d\x30\x82\x02\x22\x30\x0d\x06\x09\x2a\x86\x48\x86\xf7\x0d"
	"\x01\x01\x01\x05\x00\x03\x82\x02\x0f\x00\x30\x82\x02\x0a\x02\x82"
	"\x02\x01\x00\xaf\x3c\xbf\xee\x68\xa1\xf9\x86\x40\x94\xca\x68\x7a"
	"\xd1\x29\x3f\xbc\x7d\x8e\x12\x18\xaf\xc2\x62\x51\xfa\xb5\xe3\x91"
	"\x7f\x75\x83\x78\xd7\xcc\xac\x2a\xdb\xf0\x5c\x6b\x73\x62\x84\x8b"
	"\x6d\x37\xf9\x6c\xc2\x14\x0c\xc5\xc0\xe2\xe5\x93\xc4\x30\x64\xde"
	"\x17\x84\x2a\x7c\x6e\xd5\x86\x55\x8d\x8d\xf7\xc3\x20\xb2\x8a\x74"
	"\x1e\xe1\xd7\xa3\xef\xb7\x39\x45\xf8\x2f\x14\xac\x30\xff\xe2\xab"
	"\xb9\xfd\x9e\x4b\x5a\xf0\x9a\xa1\x8f\x95\x29\xba\x51\xa8\x2f\xca"
	"\xa2\x01\x21\x96\x13\x6f\xfe\x17\x66\xfc\x14\xd4\xd7\x66\x8d\xec"
	"\xd8\xae\x76\x90\x16\xbf\xe6\x54\xed\x75\x5d\x2d\xfe\x9e\xc6\x9f"
	"\xc8\xfe\x5f\x3b\xc6\x20\xb5\x30\x74\x33\x70\x5b\x33\x50\x15\x56"
	"\x78\x95\x88\x87\x9d\xe9\x78\x7b\x63\xb8\x56\x09\x77\xa5\xba\xab"
	"\x76\x21\x6c\x76\x19\x06\x88\x08\xeb\x04\x95\x71\x91\x0d\xfa\x2e"
	"\xe4\x28\x9e\x0c\xce\x5a\x41\xef\x52\x28\x5d\xdd\xb4\x81\x65\xc1"
	"\xd0\x4a\xe2\x94\x82\xe0\x75\xee\xc5\x4e\x7b\x78\x25\xaf\xcd\x73"
	"\x93\x35\xe2\x1a\x31\x8d\xbe\x08\x66\x4c\xb8\xc7\xb0\x5a\xb6\x09"
	"\xb0\xbb\x4c\xa3\xbf\x37\x97\x32\xb3\x39\x5f\x59\xda\x56\x59\x18"
	"\x9f\xec\x3e\x69\xbf\xcd\x7f\xbe\x77\x50\x55\xc0\x6a\x49\x6f\x72"
	"\x4c\x8c\xee\xa8\xe8\x32\xbb\xef\x48\xc6\x92\x56\x1a\xb1\x57\xef"
	"\x81\x82\x09\xc6\x11\xb2\xb6\x18\x99\x25\xc3\x3b\xdb\x32\xc0\x0e"
	"\x82\x90\x1d\x19\xa1\xf0\x0c\xec\x28\x9b\x25\x88\x8c\x88\x63\x7a"
	"\xf3\xeb\x93\xca\x7d\x8d\xfd\x82\x19\x9b\xf6\x62\xcd\x2f\x88\x84"
	"\x3d\x0a\x29\x78\x50\xd6\x94\x73\x0c\x1c\x8f\xe5\x9e\xde\xcc\x2a"
	"\xcb\x7e\xf7\xfb\xd2\xbb\x64\xc8\x69\x1a\xf5\x4e\xdb\xb0\xdc\x01"
	"\x85\x26\xa7\x02\x3a\xe0\xef\x63\x7a\x39\xe6\x71\x53\x83\x42\xca"
	"\xf1\xd6\x52\xda\xee\xd0\xa5\xe4\x62\xb8\x01\xcd\x04\x2d\xa1\x52"
	"\x69\x07\x40\xd0\xeb\xc7\x4f\x49\x8e\x5d\x92\x8c\x41\x03\x92\xfb"
	"\x51\x2d\x0b\x6c\x4c\xb2\xc8\x70\x04\x65\xad\xf3\x49\x2f\xeb\xdd"
	"\xa9\x7f\x5c\xa6\x69\x76\xea\xb8\xc9\xde\x17\xf2\xbe\x61\xb6\xc6"
	"\xae\x9d\x66\x14\xa3\xc4\xe0\x5b\xf9\xe4\x42\x04\xd8\x2e\xf6\x5d"
	"\x2e\x06\x42\xb5\xc6\x72\x29\x52\x15\x6a\x04\x07\x52\x2e\x9c\x34"
	"\x3d\x29\x40\x4f\xd9\x36\x36\xc1\xb4\xcc\xa1\x6c\x19\x02\xec\x45"
	"\x72\x30\xc6\x2a\x63\x02\xd8\x86\x03\x6b\xed\x96\xde\xf6\x84\xdb"
	"\x64\xba\x33\x02\x03\x01\x00\x01\x30\x0d\x06\x09\x2a\x86\x48\x86"
	"\xf7\x0d\x01\x01\x0b\x05\x00\x03\x82\x02\x01\x00\x12\x79\x68\x81"
	"\xff\x7c\x9c\xd9\x89\x08\xff\xe5\x5c\x33\x77\x62\x2a\xc7\xea\xbf"
	"\xc1\x9b\x32\xc3\x43\xfd\x10\x75\x75\x87\xa1\x8a\x6f\xcf\x6c\x2f"
	"\x2e\x64\x13\xa7\x8d\xff\xf9\xb0\x6a\x35\x0f\x02\xf9\xd7\xf4\x62"
	"\xf0\xe7\x8c\x54\x5d\xbc\x41\xcb\x3c\x69\x9e\xa8\xdd\xea\x6b\x98"
	"\xff\x7c\x95\x2c\x68\x8e\x09\x81\x0b\xd1\x59\xb7\x53\xc3\xd2\x18"
	"\x18\x44\x89\x04\x54\xda\x07\x70\x77\x56\x30\x64\x70\xd9\x2b\xf5"
	"\x70\xa8\x63\xfc\x17\x70\x02\x23\x96\x35\x83\x2d\x8e\xd1\x2e\xd6"
	"\xab\x2e\x1a\x72\xfe\x3e\xa3\x87\xec\x00\x3a\x2b\x1c\xc1\xba\x88"
	"\xab\x9d\x9d\x01\xdf\xc0\x41\xca\xc8\x03\x20\x81\xcd\x65\x94\xdc"
	"\xb8\xec\x6f\x5b\x4f\xb8\xfa\x0d\xaa\xbf\x3b\x98\x8c\xb8\xae\x86"
	"\x01\xec\x3e\xd4\x82\x2f\x9b\x60\xe2\xdf\x57\xc6\x03\x47\xfd\x99"
	"\x55\xb3\xf2\xfb\x63\x39\x2d\x59\x9a\xa7\xf1\xe3\xad\x45\xaf\x7d"
	"\x03\x08\xf9\x8b\xf2\xec\xb6\xbf\xe4\xca\x71\x1f\x01\xa4\x20\xdc"
	"\x5d\xea\x0e\x4b\xa8\x09\xb2\xa9\x4a\x95\x76\xea\x2c\x84\x69\xc7"
	"\x56\x53\x46\x59\xaf\x96\xd8\x2e\xd1\x09\x62\xf4\x38\x48\xac\x77"
	"\xe5\x3e\x99\xae\x2a\x45\x0a\xd8\x11\x21\xb9\xa8\x12\x96\xcc\xb2"
	"\x7d\x98\x19\xbe\xbe\x26\xa8\xf7\x49\x04\x21\xdb\x03\xd0\x35\xcc"
	"\x7b\x18\x21\x77\xdc\xa9\x6f\x1c\xae\x2d\x35\x28\xb1\x15\xb9\x8a"
	"\x1c\xa5\x75\xc8\x41\xe6\x81\x2c\xca\xdb\x5b\x79\x41\x4b\x08\x89"
	"\x2c\xc8\xe0\x42\x3e\x49\x90\xaa\x6d\xea\x55\xcf\x20\xb8\x3a\xce"
	"\xd1\xa4\xaf\xdd\xd4\x6c\xc4\x3b\x7b\x08\x6b\xb6\x96\x26\x4c\x44"
	"\x34\x03\x94\xb3\x1a\x5c\xee\x87\x99\x86\xf6\xb5\xaf\x99\x91\x1b"
	"\x13\x77\x8c\xad\xb9\x1f\x62\x56\x46\x63\x7c\x1d\xc1\x09\x3e\x59"
	"\xb2\x7e\x52\x37\xf6\xca\x67\xdd\x01\x8f\x3e\xa2\xee\x94\x6a\x98"
	"\x78\xe5\x3c\x43\xdc\xbb\x7f\x18\xc4\x81\xce\x6d\x00\xad\x08\x13"
	"\x91\xb4\xb0\x39\x04\x1f\x4d\x8c\xb4\x61\x32\x44\xb7\xe6\xdc\x4c"
	"\x64\x25\x63\x21\x52\x84\x0b\xb3\xa7\x9a\xdd\x26\xd8\xeb\xfa\x4d"
	"\x9c\x18\xa0\xed\x27\x5a\xf4\x24\x42\xdd\x6c\xb8\x45\xfc\xf3\x6c"
	"\xfd\x09\xe2\xd5\x80\x71\x82\x87\x56\x14\x06\x1a\x56\x63\x6f\x79"
	"\xf2\xdb\x83\x36\x10\x9a\xf5\x0d\xac\xe7\x55\x44\x96\x74\x21\xc4"
	"\x96\x34\x5d\x41\xca\x90\x8e\x13\xdd\x0d\x06\xca\xf8\xd9\x80\x24"
	"\xd5\xc9\x9f\xee\xf0\x9d\x09\x5b\x80\xee\xcf\xfc", 1356);

	string result = Base64::decode(data);

	CPPUNIT_ASSERT_EQUAL((size_t) 1356, expect.size());
	CPPUNIT_ASSERT_EQUAL(expect.size(), result.size());
	CPPUNIT_ASSERT_EQUAL(expect, result);
}

}

#endif
